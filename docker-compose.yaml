version: "3.8" # https://docs.docker.com/compose/compose-file/compose-versioning/

x-django:
  &default-django
  environment:
    DJANGO_SETTINGS_MODULE: production_settings
  secrets:
    - inyoka-postgres-password
    - inyoka-redis-password
    - inyoka-secret-key
    - inyoka-akismet-key
    - inyoka-sentry-dsn
  configs:
    - source: inyoka-config
      target: /inyoka/code/production_settings.py
    - inyoka-base-domain
    - inyoka-media-domain
    - inyoka-static-domain


services:
  postgres:
    # pin postgres major version to prevent unexpected database migrations
    # debian image is used, as alpine can have problems with locals
    # see https://github.com/docker-library/docs/blob/master/postgres/README.md#locale-customization
    image: postgres:14-bullseye
    restart: always
    environment:
      POSTGRES_DB: inyoka
      # TODO defines superuser name -> do not use superuser from inyoka?
      POSTGRES_USER: inyoka
      POSTGRES_PASSWORD_FILE: /run/secrets/inyoka-postgres-password
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
      POSTGRES_INITDB_ARGS: "--data-checksums"
    # increase shared memory like recommended at https://github.com/docker-library/docs/blob/master/postgres/README.md#caveats
    shm_size: 256M
    # https://github.com/docker-library/postgres/blob/a83005b407ee6d810413500d8a041c957fb10cf0/14/bullseye/Dockerfile#L211-L213
    # https://www.postgresql.org/docs/14/server-start.html suggests no timeout
    stop_grace_period: 5m
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    configs:
      - source: postgres-config
        target: /etc/postgresql/postgresql.conf
    secrets:
      - inyoka-postgres-password
    volumes:
      - postgres-data:/var/lib/postgresql/data

#  database-migration:
#    << : *default-django
#    image: inyokaproject
#    command: /root/.venvs/inyoka/bin/python manage.py migrate
#    depends_on:
#      - postgres
#    profiles:
#      - maintenance

  inyoka-worker:
    << : *default-django
    image: inyokaproject
    restart: always
    expose:
      - "8000/tcp"
    command: /root/.venvs/inyoka/bin/gunicorn -b 0.0.0.0:8000 --workers 8 --max-requests 500 inyoka.wsgi:application
    # TODO depends_on:

  redis:
    image: redis:6.2-alpine
    restart: always
    command: redis-server /etc/redis/redis.conf
    configs:
     - source: redis-config
       target: /etc/redis/redis.conf
       uid: "999" # see `id redis` inside the redis container
       gid: "1000"
       mode: 0440
    secrets:
      - inyoka-redis-password

  celeryworker:
    << : *default-django
    image: inyokaproject
    restart: always
    command: /root/.venvs/inyoka/bin/celery worker --app=inyoka --loglevel=INFO --concurrency=8

  celerybeat:
    << : *default-django
    image: inyokaproject
    restart: always
    command: /root/.venvs/inyoka/bin/celery beat --app=inyoka --loglevel=INFO --schedule /volume/celerybeat-schedule/celerybeat-schedule
    volumes:
      - celerybeat-schedule:/volume/celerybeat-schedule

  caddy:
    image: caddy-inyoka
    restart: unless-stopped
    volumes:
      - caddy_data:/data
      - caddy_config:/config
    configs:
      - source: Caddyfile
        target: /etc/caddy/Caddyfile
      - inyoka-base-domain
      - inyoka-media-domain
      - inyoka-static-domain


configs:
  inyoka-config:
    file: ./production_settings.py
    template_driver: golang
  postgres-config:
    file: ./postgres.conf
    template_driver: golang
  redis-config:
    file: ./redis.conf
    template_driver: golang
  Caddyfile:
    file: ./Caddyfile
    template_driver: golang
  inyoka-base-domain:
    external: true
  inyoka-media-domain:
    external: true
  inyoka-static-domain:
    external: true

secrets:
  inyoka-postgres-password:
    external: true
  inyoka-redis-password:
    external: true
  inyoka-secret-key:
    external: true
  inyoka-akismet-key:
    external: true
  inyoka-sentry-dsn:
    external: true

# https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference
volumes:
  celerybeat-schedule: {}
  postgres-data: {}
  caddy_data: {}
  caddy_config: {}
